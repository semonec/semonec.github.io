{"version":3,"sources":["serviceWorker.ts","modules/snake.ts","modules/index.ts","components/Canvas.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","turnLeft","createStandardAction","turnRight","turnUp","turnDown","startGame","stopGame","moveSnake","createFood","increaseBody","initialState","direction","x","y","position","speed","inGame","size","body","snake","createReducer","handleAction","state","action","payload","console","log","newBody","map","i","food","append","slice","push","rootReducer","combineReducers","Canvas","props","canvasRef","prevProps","timer","animater","React","createRef","undefined","_canvas","this","current","_ctx","getContext","clearCanvas","initText","addEventListener","keyDownHandler","bind","removeEventListener","xDir","yDir","JSON","stringify","newXPos","newYPos","isSnakeAlive","clearTimeout","cancelAnimationFrame","store","dispatch","newTailX","newTailY","tail","length","getCanvasAndContext","forEach","pos","fillStyle","fillRect","width","height","hitted","findIndex","gradient","createLinearGradient","addColorStop","font","textAlign","fillText","updateSnake","drawFood","drawSnake","setTimeout","requestAnimationFrame","animate","xMax","yMax","getRand","min","max","Math","floor","random","evt","key","startSnake","ref","Component","connect","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d1cc7cb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  createStandardAction,\n  ActionType,\n  createReducer\n} from 'typesafe-actions';\n\n\nconst TURN_LEFT= 'snake/TURN_LEFT';\nconst TURN_RIGHT= 'snake/TURN_RIGHT';\nconst TURN_UP= 'snake/TURN_UP';\nconst TURN_DOWN= 'snake/TURN_DOWN';\nconst START_GAME= 'snake/START_GAME';\nconst STOP_GAME= 'snake/STOP_GAME';\nconst MOVE_SNAKE = 'snake/MOVE_SNAKE';\nconst CREATE_FOOD = 'snake/CREATE_FOOD';\nconst INCREASE_BODY = 'snake/INCREASE_BODY';\n\nexport const turnLeft = createStandardAction(TURN_LEFT)();\nexport const turnRight = createStandardAction(TURN_RIGHT)();\nexport const turnUp = createStandardAction(TURN_UP)();\nexport const turnDown = createStandardAction(TURN_DOWN)();\nexport const startGame = createStandardAction(START_GAME)();\nexport const stopGame = createStandardAction(STOP_GAME)();\nexport const moveSnake = createStandardAction(MOVE_SNAKE)<Snake2DPosition>();\nexport const createFood = createStandardAction(CREATE_FOOD)<Snake2DPosition>();\nexport const increaseBody = createStandardAction(INCREASE_BODY)<Snake2DPosition>();\n\nconst actions = { turnLeft, turnRight, turnUp, turnDown, \n  startGame, stopGame, \n  moveSnake, increaseBody,\n  createFood };\nexport type SnakeAction = ActionType<typeof actions>;\n\ntype Snake2DPosition = {\n  x: number,\n  y: number\n}\n\n\nexport type SnakeState = {\n  direction: Snake2DPosition,\n  position: Snake2DPosition,\n  speed: number,\n  inGame: boolean,\n  size: number,\n  food?: Snake2DPosition,\n  body: Snake2DPosition[];\n}\n\nconst initialState: SnakeState = {\n  direction: {\n    x: 0,\n    y: 0\n  },\n  position: {\n    x: 0,\n    y: 0\n  },\n  speed: 10,\n  inGame: false,\n  size: 10,\n  body: [{x: 0, y: 0}]\n}\n\nconst snake = createReducer<SnakeState, SnakeAction>(initialState)\n  .handleAction(TURN_LEFT, state => ({...state, direction: { x: -1, y: 0 }}))\n  .handleAction(TURN_RIGHT, state => ({...state, direction: { x: 1, y: 0 }}))\n  .handleAction(TURN_UP, state => ({...state, direction: { x: 0, y: -1 }}))\n  .handleAction(TURN_DOWN, state => ({...state, direction: { x: 0, y: 1 }}))\n  .handleAction(START_GAME, state => ({...state, inGame: true}))\n  .handleAction(STOP_GAME, state => (initialState))\n  .handleAction(MOVE_SNAKE, (state, action) => {\n    let {x, y} = action.payload;\n    console.log('moveSnake1', action.payload);\n\n  let newBody = state.body.map((body, i) => {\n      if (i === 0) \n        return {x: body.x, y: body.y};\n      return state.body[i-1];\n    })\n    newBody[0].x += action.payload.x;\n    newBody[0].y += action.payload.y;\n\n    return {...state, body: newBody};\n  })\n  .handleAction(CREATE_FOOD, (state, action) => ({...state, food: action.payload}))\n  .handleAction(INCREASE_BODY, (state, action) => {\n    let append = state.body.slice()\n    append.push(action.payload);\n    return { ...state, body: append };\n  })\nexport default snake;\n","import { combineReducers } from 'redux';\nimport snake from './snake';\n\nconst rootReducer = combineReducers({\n  snake,\n});\n\nexport default rootReducer\nexport type RootState = ReturnType<typeof rootReducer>;","import React, { RefObject } from 'react';\nimport { connect } from 'react-redux';\nimport { turnUp, turnDown, turnLeft, turnRight, startGame, SnakeState, stopGame, moveSnake, createFood, increaseBody } from '../modules/snake';\nimport { RootState } from '../modules/index';\nimport { store } from '../index';\n\nclass Canvas extends React.Component<SnakeState> {\n  private canvasRef: RefObject<HTMLCanvasElement>;\n  props: SnakeState;\n  prevProps: SnakeState;\n  timer: any;\n  animater: any;\n\n  constructor(props: SnakeState) {\n    super(props);\n    this.canvasRef = React.createRef<HTMLCanvasElement>();\n    this.props = props;\n    this.prevProps = props;\n    this.timer = undefined;\n    this.animater = undefined;\n  }\n\n  getCanvasAndContext() {\n    const _canvas = this.canvasRef.current;\n    const _ctx = _canvas && _canvas.getContext(\"2d\");\n    return { _canvas, _ctx };\n  }\n\n  componentDidMount() {\n      this.clearCanvas();\n      this.initText();\n      window.addEventListener('keyup', this.keyDownHandler.bind(this));\n\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keyup', this.keyDownHandler.bind(this));\n  }\n\n  componentWillReceiveProps() {\n    this.prevProps = this.props;\n  }\n\n  updateSnake(): boolean {\n\n    const { x: xDir, y: yDir } = this.props.direction;\n    let { x, y }  = this.props.body[0];\n    const { size, food } = this.props;\n    if ( JSON.stringify(this.props) === JSON.stringify(this.prevProps) ) {\n      return true;\n    }\n    let newXPos = x + xDir * size;\n    let newYPos = y + yDir * size;\n\n    if (!this.isSnakeAlive(newXPos, newYPos)) {\n      !this.timer && clearTimeout(this.timer);\n      !this.animater && window.cancelAnimationFrame(this.animater);\n      this.timer = undefined;\n      this.animater = undefined;\n      store.dispatch(stopGame());\n      return false;\n    }\n\n    if (food !== undefined) {\n      if (newXPos === food.x && newYPos === food.y)  {\n        // TODO: append body\n        let tail = this.props.body[this.props.body.length -1];\n        let newTailX, newTailY;\n\n        newTailX = tail.x - xDir * size;\n        newTailY = tail.y + yDir * size\n\n        store.dispatch(increaseBody({x: newTailX, y: newTailY}));\n        this.createFood();\n      }\n    }\n\n    store.dispatch(moveSnake({\n      x: xDir * size, \n      y: yDir * size\n    }));\n    return true;\n  }\n\n  drawSnake() { \n    // head\n    const size = this.props.size;\n    let { _canvas, _ctx } = this.getCanvasAndContext();\n\n    this.props.body.forEach((pos, i) => {\n      let { x, y }  = pos;\n\n      if (_canvas !== null && _ctx !== null) {\n        _ctx.fillStyle= i !== 0 ? \"black\" : \"blue\";\n        _ctx.fillRect(x , y, size, size);\n      }\n    })\n  }\n\n  drawFood() {\n    let { x, y }  = this.props.food || { x: 0, y: 0 };\n    const size = this.props.size;\n    let { _canvas, _ctx } = this.getCanvasAndContext();\n    if (_canvas !== null && _ctx !== null) {\n      _ctx.fillStyle=\"red\";\n      _ctx.fillRect(x , y, size, size);\n    }\n  }\n\n  isSnakeAlive(x: number, y: number) {\n    const { _canvas, _ctx } = this.getCanvasAndContext();\n    let { size }  = this.props;\n\n    // not in a game\n    if (!this.props.inGame)\n      return false;\n\n    // out of canvas case\n    if ( x < 0 || y < 0 )\n      return false;\n    \n    if (_canvas !== null && _ctx !== null) {\n      const { width, height } = _canvas;\n      if ( x + size > width || y + size > height) {\n        return false;\n      }\n    }\n\n    // hit by body\n    let hitted = this.props.body.findIndex((body) => body.x === x && body.y === y);\n    if (hitted > 0 && hitted < this.props.body.length -1) {\n      return false;\n    }\n    return true;\n  }\n\n  clearCanvas() {\n    const { _canvas, _ctx } = this.getCanvasAndContext();\n    if (_ctx !== null && _canvas !== null) {\n      _ctx.fillStyle = \"gray\";\n      _ctx.fillRect(0, 0, _canvas.width, _canvas.height);\n    }\n  }\n\n  initText() {\n    const { _canvas, _ctx } = this.getCanvasAndContext();\n    if (_ctx !== null && _canvas !== null) {\n      let gradient = _ctx.createLinearGradient(0, 0, _canvas.width, 0);\n      gradient.addColorStop(0,\" magenta\");\n      gradient.addColorStop(0.5, \"blue\");\n      gradient.addColorStop(1.0, \"red\");\n      _ctx.fillStyle = gradient;\n      _ctx.font = \"30px Courier\";\n      _ctx.textAlign = 'center';\n      _ctx.fillText(\"Hello Snake!\", _canvas.width / 2, _canvas.height / 2);\n      _ctx.font = \"15px Courier\";\n      _ctx.textAlign = 'center';\n      _ctx.fillText(\"Press Enter to Start!\", _canvas.width / 2, _canvas.height / 2 + 20);\n    }\n  }\n\n  animate() {\n    console.log('update...', this.props.direction, this.props.body[0], this.props.inGame);\n    this.clearCanvas();\n    if (this.updateSnake()) {\n      this.drawFood();\n      this.drawSnake();\n      this.timer = setTimeout(() => {\n          this.animater = window.requestAnimationFrame(this.animate.bind(this))\n        }, \n        1000 / this.props.speed\n      );\n    } else {\n      // have to game out display, but not yet impl\n      // TODO: impl \n      this.initText();\n    }\n  }\n\n  startSnake() {\n    console.log('Start Snake!!!');\n    this.clearCanvas();\n    // ready animate frame\n    store.dispatch(startGame());\n    this.createFood();\n    this.animate();\n  }\n\n  createFood() {\n    let xMin = 0;\n    let xMax = ((this.canvasRef.current && this.canvasRef.current.width) || 400) / this.props.size;\n    let yMin = 0;\n    let yMax = ((this.canvasRef.current && this.canvasRef.current.height) || 400) / this.props.size;\n\n    let getRand = (min: number, max: number) => {\n      return (Math.floor(Math.random() * (max-min)) + min) * this.props.size;\n    }\n    let x = getRand(xMin, xMax);\n    let y = getRand(yMin, yMax);\n    store.dispatch(createFood({x, y}));\n  }\n\n  keyDownHandler(evt: KeyboardEvent) {\n    const { inGame } = this.props;\n    switch(evt.key) {\n      case 'Enter':\n        !inGame && this.startSnake();\n        break;\n      case 'ArrowUp':\n        store.dispatch(turnUp());\n        break;\n      case 'ArrowDown':\n        store.dispatch(turnDown());\n        break;\n      case 'ArrowLeft':\n        store.dispatch(turnLeft());\n        break;\n      case 'ArrowRight':\n        store.dispatch(turnRight());\n        break;\n      case 'Escape':\n        store.dispatch(stopGame());\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas ref={ this.canvasRef } width={400} height={400} ></canvas>\n      </div>\n    );\n  }\n\n};\n\nlet mapStateToProps = (state: RootState) => {\n  return state.snake;\n}\n\nexport default connect(mapStateToProps)(Canvas);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './modules/index';\nimport { createStore } from 'redux';\nimport Canvas from './components/Canvas';\nimport { Provider } from 'react-redux';\n\n\nexport const store = createStore(\n  rootReducer,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store= {store}>\n    <Canvas/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}