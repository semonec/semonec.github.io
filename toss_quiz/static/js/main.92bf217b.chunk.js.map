{"version":3,"sources":["Item.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Item","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","item","link","inherits","createClass","key","value","nextProps","nextState","compareItem","setState","react_default","a","createElement","href","target","Component","App","text","result","e","_this2","axios","get","concat","headers","X-Naver-Client-Id","X-Naver-Client-Secret","then","response","console","log","items","data","filtered","filter","search","catch","err","error","list","length","map","index","Item_Item","className","type","onChange","changeText","bind","onClick","query","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92bf217b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport interface ItemState {\r\n    title?: string,\r\n    link?: string,\r\n};\r\n\r\nexport interface ItemProps {\r\n    item: ItemState,\r\n}\r\n\r\nexport class Item extends Component<ItemProps, ItemState> {\r\n    constructor(props: ItemProps) {\r\n        super(props);\r\n        this.state = {\r\n            title: props.item && props.item.title,\r\n            link: props.item && props.item.link,\r\n        }\r\n    }\r\n\r\n    compareItem(item: ItemState) {\r\n        return this.props.item.link !== item.link ||  this.props.item.title !== item.title; \r\n    }\r\n    shouldComponentUpdate(nextProps: ItemProps, nextState: ItemState) {\r\n        if (this.compareItem(nextProps.item)) {\r\n            this.setState({\r\n                title: nextProps.item.title,\r\n                link: nextProps.item.link,\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <a href={this.state.link} target=\"_blank\">{this.state.title}</a>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport { Item } from './Item';\n\nexport interface AppState {\n  text?: string,\n  result: never[],\n};\n\nexport class App extends Component<{}, AppState> {\n  constructor(props: AppState) {\n    super(props);\n    // this.query.bind(this);\n    // this.changeText.bind(this);\n    this.state = {text: \"\", result: []};\n  }\n\n  private changeText(e: any) {\n    this.setState({\n      text: e.target.value,\n    });\n  }\n\n  private query() {\n    const config: AxiosRequestConfig = {\n      headers: {\n        'X-Naver-Client-Id': 'QfWUBuPQLRV5IUFcNJ9l',\n        'X-Naver-Client-Secret': 'G130WKaANl',\n      },\n    };\n    axios.get(`https://openapi.naver.com/v1/search/news.json?query=${this.state.text}`, config)\n      .then(response => {\n        console.log(response);\n        let items: [] = response.data.items;\n        if (items) {\n          let filtered: never[] = items.filter((e:any) => {\n            let title: string = e.title;\n            if (title.search('토스') >= 0 || title.search('퀴즈') >= 0) {\n              return true;\n            }\n          });\n          console.log(filtered);\n          this.setState({result: filtered});\n        }\n      })\n      .catch(err => {\n        console.error(err);\n        this.setState({result: []});\n      })\n  }\n\n  render() {\n    let list;\n    if (this.state.result.length) {\n      list = this.state.result.map((item, index) => {\n        return <Item item={item} />;\n      });\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Input keyword then, press 'SEARCH' button</p>\n          <input type=\"text\" onChange={this.changeText.bind(this)}></input>\n          <br/>\n          <button onClick={this.query.bind(this)}>SEARCH</button>\n          {list}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}